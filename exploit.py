#!/usr/bin/python

#Description:
#---------------------
#exploit why outlier point is detected
#---------------------
#Create by coder-james

import os
import lib.conf as conf
from lib.lof_ac import LOF
import numpy as np
from time import time
import lib.hics as hics
import pandas as pd
import lib.preprocess as pre

def getDataFrame(inputfile):
  """read csv to get dataframe using pandas"""
  filepath = os.path.join(conf.DATA_DIR, inputfile)
  df = pd.read_csv(filepath)
  return df

def process(tablename):
  """get LOF-ranked data"""
  rankedfile = tablename + conf.rank_suffix
  indices, ids, vecs = pre.getvecs(rankedfile, directory=conf.OUTPUT_DIR)
  exploitBy(tablename, ids)

def exploitBy(tablename, targetids):
  savefile = open(os.path.join(conf.OUTPUT_DIR, tablename + conf.exploit_suffix),"w")
  """compute lof values of targetids"""
  df = getDataFrame(conf.filter_prefix + tablename + conf.filter_suffix)
  rawvecs = df.iloc[:, 1:].values
  rawindices = list(df.columns)[1:]
  assert rawvecs.shape[1] == len(rawindices)
  k = conf.get_k(tablename)
  m = LOF(k, include=False, log=False)
  result1 = []
  t1 = time()
  for i,indice in enumerate(rawindices):
    data = rawvecs[:,i].reshape(-1,1)
    lofs = m.fit(data)
    #result1.append(lofs[targetrows])
    savefile.write("%s:%s\n" % (indice, ",".join(np.array(lofs, np.str))))
  t2 = time()
  print "%s s --- compute lof for %s columes" %(t2 - t1, len(rawindices))
  """get all selected subspaces based on high contrast subspace"""
  #Pearson
  subspaces = hics.p_selection(df.iloc[:,1:])
  t3 = time()
  print "%s s --- select %s subspaces" %(t3 - t2, len(subspaces))
  """ choose to compute local density """
  indices_dict = {indice:i for i,indice in enumerate(rawindices)}
  result2 = []
  sp_ind = [[indices_dict[tup[0]], indices_dict[tup[1]]] for tup in subspaces]
  for j,ind in enumerate(sp_ind):
    #print subspaces[j]
    data = rawvecs[:, ind]
    lofs = m.fit(data)
    #result2.append(lofs[targetrows])
    savefile.write("%s:%s\n" % (",".join(subspaces[j]), ",".join(np.array(lofs, np.str))))
  savefile.close()
  print "%s s --- compute lof for subspaces" %(time() - t3)
  print "%s s --- cost time summation" %(time() - t1)

def attachkey(tablename):
  rankedfile = tablename + conf.rank_suffix
  _, ids, _ = pre.getvecs(rankedfile, directory=conf.OUTPUT_DIR)
  attachkeybyid(ids[0], tablename)

def attachkeybyid(targetid, tablename):
  df = getDataFrame(conf.filter_prefix + tablename + conf.filter_suffix)
  rawids = {str(rid) : r for r,rid in enumerate(list(df.iloc[:, 0]))}
  targetrow = rawids[targetid]
  with open(os.path.join(conf.OUTPUT_DIR, tablename + conf.exploit_suffix)) as ifile:
    lines = [[line.split(":")[0].split(","), np.array(line.split(":")[1].split(","), np.float32)] for line in ifile.read().split("\n") if len(line) > 0]
  #lines1 = [[arr[0][0], arr[1][targetrow]] for arr in lines if len(arr[0]) == 1 and arr[1][targetrow] >= 2]
  #lines2 = [[arr[0], arr[1][targetrow]] for arr in lines if len(arr[0]) == 2 and arr[1][targetrow] >= 2]
  items = [arr[0] for arr in lines if arr[1][targetrow] >= 2]
  potentkeys = set([])
  for item in items:
    for it in item:
      potentkeys.add(it)
  print targetid, potentkeys

if __name__ == "__main__":
  tablename = "spark_task_metrics_summary"
  #process(tablename)
  attachkey(tablename)
